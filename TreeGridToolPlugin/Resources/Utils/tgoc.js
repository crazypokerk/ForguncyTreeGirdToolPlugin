class TreeGridOptionsConfig{_treeDom;_treeData=null;_columnsConfig;_cellTypeMap;_cellIsEditMap;_columnsProperties;_typesProperties;_types={};_relations=new Map;_updateData=new Map;_ForguncyTree=null;_checkbox=false;_dragAndDrop=false;_dndOptionsType={};_selectMode="multi";_connectTopBreadcrumb=null;_levelMap=new Map;_bindingDataSourceModel=null;_treeGridToolPluginCellType=null;cellType={0:"text",1:"number",2:"date",3:"checkbox",4:"select",5:"link"};constructor(e){this._treeGridToolPluginCellType=e.TreeGridToolPluginCellType;this._typesProperties=e.typesProperties;this._columnsConfig=e.columnsConfigObj.cols;this._cellTypeMap=e.columnsConfigObj.cellTypeMap;this._cellIsEditMap=e.columnsConfigObj.cellIsEdit;this._columnsProperties=e.columnsProperties;this._checkbox=e.checkbox;this._dragAndDrop=e.dragAndDrop;this._selectMode=e.selectMode;this._connectTopBreadcrumb=e.connectTopBreadcrumb;for(let e of this._typesProperties){this._types[e.Level]={icon:e.Name,colspan:e.IsColspan===undefined?false:e.IsColspan}}for(let e of this._typesProperties){this._levelMap.set(e.Level,{icon:e.Name,colspan:e.IsColspan===undefined?false:e.IsColspan,asyncLoadData:e.IsAsyncLoadData===undefined?false:e.IsAsyncLoadData})}for(let e of this._columnsProperties){this._relations.set(e.Id,{cellType:e.CellType,jsonPropertyName:e.Id})}if(this._dragAndDrop){this._dndOptionsType={dragStart:e=>{if(e.node.type==="folder"){return false}e.event.dataTransfer.effectAllowed="all";return true},dragEnter:e=>{if(e.node.type==="folder"){e.event.dataTransfer.dropEffect="copy";return"over"}return["before","after"]},drop:e=>{console.log("Drop "+e.sourceNode+" => "+e.region+" "+e.node);e.sourceNode.moveTo(e.node,e.suggestedDropMode)}}}}set treeDom(e){this._treeDom=e}set treeData(e){this._treeData=e}get checkbox(){return this._checkbox}get treeData(){return this._treeData}get levelMap(){return this._levelMap}get relations(){return this._relations}set updateData(e){this._updateData=e}get updateData(){return this._updateData}set ForguncyTree(e){this._ForguncyTree=e}get ForguncyTree(){return this._ForguncyTree}set bindingDataSourceModel(e){this._bindingDataSourceModel=e}get bindingDataSourceModel(){return this._bindingDataSourceModel}buildTreeGridOptions(){try{let e=new mar10.Wunderbaum({id:"fg-tree-1-0-0",element:this._treeDom,debugLevel:1,connectTopBreadcrumb:this._connectTopBreadcrumb,checkbox:this._checkbox,selectMode:this._selectMode,navigationModeOption:"cell",source:this._treeData,types:this._types,columns:this._columnsConfig,columnsResizable:true,columnsSortable:true,dnd:this._dndOptionsType,tooltip:e=>`${e.node.title} (${e.node.key})`,edit:{trigger:["clickActive","F2"],select:true,showClickDelay:1e3,beforeEdit:function(e){},edit:e=>{console.log(e.type,e)},apply:function(e){console.log(e.type,e);return e.util.setTimeoutPromise(()=>{e.inputElem.setCustomValidity("");if(e.newValue.match(/.*\d.*/)){e.inputElem.setCustomValidity("No numbers please.");return false}},1e3)}},filter:{mode:"hide",autoExpand:true},init:e=>{const t=e.tree},buttonClick:function(e){if(e.command==="sort"){e.tree.sortByProperty({colId:e.info.colId,updateColInfo:true})}},change:e=>{console.warn(this._updateData);const t=e.util;const o=e.node;const n=e.info;console.warn(n);const a=n.colId;e.tree.logDebug(`change(${a})`,t.getValueFromElem(e.inputElem,true));this._updateData.set(`${n.node.data.ID}-${a}`,{PID:n.node.data.PID,ChangedColId:a,oldValue:n.node.data[a],newValue:t.getValueFromElem(e.inputElem,true)});return t.setTimeoutPromise(()=>{o.data[a]=t.getValueFromElem(e.inputElem,true)},0)},lazyLoad:async e=>new Promise(async(t,o)=>{let n=e.node.data;let a=[];a.push({columnName:"PID",compareType:0,compareValue:n.ID});let l={queryConditions:a};const s=await this.getBindingDataWithOptions(l,1);if(s.length===0||s===[]){await e.node.setExpanded(true);e.node.setStatus("noData");e.node._isLoading=false}else{for(const t of s){let o=[];o.push(t);let n=t.Type;let a=this._levelMap.get(n)?.asyncLoadData||false;if(!a){await this.loadRecursiveData(t.ID,o)}else{break}const l=this.buildNormalTree(o,this._relations,this._levelMap,true,t.ID);e.node.addNode(l[0],"appendChild");await e.node.setExpanded(true);e.node._isLoading=false}}}),render:e=>{const t=e.node;const o=e.util;for(const n of Object.values(e.renderColInfosById)){const a=t.data[n.id];if(e.isNew){n.elem.innerHTML=setColumnCellType(this._cellTypeMap.get(n.id));o.setValueToElem(n.elem,a)}}}});this._ForguncyTree=e}catch(e){throw new Error(e)}}buildNormalTree(e,t,o,n=false,a=null){const l={};const s=[];e.forEach(e=>{l[e.ID]={...e}});e.forEach(e=>{let o=this._levelMap.get(e.Type)?.asyncLoadData||false;const i={ID:e.ID,PID:e.PID,type:e.Type,selected:false,lazy:o,...r(e,t)};if(n){if(a===e.ID){l[e.ID].children=[];s.push(i)}else{c(e,i,l)}}else{if(e.PID===null){s.push(i)}else{c(e,i,l)}}function c(e,t,o){if(!o[e.PID].children){o[e.PID].children=[]}o[e.PID].children.push(t)}l[e.ID]=i});return s;function r(e,t){const o={};t.forEach((t,n)=>{if(t.jsonPropertyName.toLowerCase()==="title"){o[t.jsonPropertyName.toLowerCase()]=e[n]}o[t.jsonPropertyName]=e[n];if(t.cellType===3){o[t.jsonPropertyName]=!!e[n]}else if(t.cellType===2){o[t.jsonPropertyName]=e[n]===null?"":e[n]}});return o}}async getBindingDataWithOptions(e,t=0){return new Promise((o,n)=>{try{this._treeGridToolPluginCellType.getBindingDataSourceValue(this._bindingDataSourceModel,e,e=>{if(t===0){o(this.buildNormalTree(e,this._relations,this._levelMap,false))}else if(t===1){o(e)}},true)}catch(e){console.error(e);n(e)}finally{if(this._treeData==null){this._treeData=[{type:null,title:"",children:null}]}}})}async loadRecursiveData(e,t){const o=[{columnName:"PID",compareType:0,compareValue:e}];const n={queryConditions:o};const a=await this.getBindingDataWithOptions(n,1);if(!a||a.length===0){return}for(const e of a){t.push(e);const o=e.Type;const n=this._levelMap.get(o)?.asyncLoadData||false;if(!n){await this.loadRecursiveData(e.ID,t)}}}}